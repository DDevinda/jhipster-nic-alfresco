{"remainingRequest":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/dushan/Desktop/projects/CA/nic_backend/node_modules/ts-loader/index.js??ref--9-3!/home/dushan/Desktop/projects/CA/nic_backend/node_modules/angular-router-loader/src/index.js!/home/dushan/Desktop/projects/CA/nic_backend/node_modules/tslint-loader/index.js!/home/dushan/Desktop/projects/CA/nic_backend/src/main/webapp/app/admin/health/health.service.ts","dependencies":[{"path":"/home/dushan/Desktop/projects/CA/nic_backend/src/main/webapp/app/admin/health/health.service.ts","mtime":1568800492169},{"path":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/dushan/Desktop/projects/CA/nic_backend/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYTsKaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnOwppbXBvcnQgeyBTRVJWRVJfQVBJX1VSTCB9IGZyb20gJ2FwcC9hcHAuY29uc3RhbnRzJzsKbGV0IEpoaUhlYWx0aFNlcnZpY2UgPSBjbGFzcyBKaGlIZWFsdGhTZXJ2aWNlIHsKICAgIGNvbnN0cnVjdG9yKGh0dHApIHsKICAgICAgICB0aGlzLmh0dHAgPSBodHRwOwogICAgICAgIHRoaXMuc2VwYXJhdG9yID0gJy4nOwogICAgfQogICAgY2hlY2tIZWFsdGgoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoU0VSVkVSX0FQSV9VUkwgKyAnbWFuYWdlbWVudC9oZWFsdGgnKTsKICAgIH0KICAgIHRyYW5zZm9ybUhlYWx0aERhdGEoZGF0YSkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gW107CiAgICAgICAgdGhpcy5mbGF0dGVuSGVhbHRoRGF0YShyZXNwb25zZSwgbnVsbCwgZGF0YS5kZXRhaWxzKTsKICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICB9CiAgICBnZXRCYXNlTmFtZShuYW1lKSB7CiAgICAgICAgaWYgKG5hbWUpIHsKICAgICAgICAgICAgY29uc3Qgc3BsaXQgPSBuYW1lLnNwbGl0KCcuJyk7CiAgICAgICAgICAgIHJldHVybiBzcGxpdFswXTsKICAgICAgICB9CiAgICB9CiAgICBnZXRTdWJTeXN0ZW1OYW1lKG5hbWUpIHsKICAgICAgICBpZiAobmFtZSkgewogICAgICAgICAgICBjb25zdCBzcGxpdCA9IG5hbWUuc3BsaXQoJy4nKTsKICAgICAgICAgICAgc3BsaXQuc3BsaWNlKDAsIDEpOwogICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBzcGxpdC5qb2luKCcuJyk7CiAgICAgICAgICAgIHJldHVybiByZW1haW5kZXIgPyAnIC0gJyArIHJlbWFpbmRlciA6ICcnOwogICAgICAgIH0KICAgIH0KICAgIC8qIHByaXZhdGUgbWV0aG9kcyAqLwogICAgYWRkSGVhbHRoT2JqZWN0KHJlc3VsdCwgaXNMZWFmLCBoZWFsdGhPYmplY3QsIG5hbWUpIHsKICAgICAgICBjb25zdCBoZWFsdGhEYXRhID0gewogICAgICAgICAgICBuYW1lCiAgICAgICAgfTsKICAgICAgICBjb25zdCBkZXRhaWxzID0ge307CiAgICAgICAgbGV0IGhhc0RldGFpbHMgPSBmYWxzZTsKICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFsdGhPYmplY3QpIHsKICAgICAgICAgICAgaWYgKGhlYWx0aE9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWx0aE9iamVjdFtrZXldOwogICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3N0YXR1cycgfHwga2V5ID09PSAnZXJyb3InKSB7CiAgICAgICAgICAgICAgICAgICAgaGVhbHRoRGF0YVtrZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIZWFsdGhPYmplY3QodmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHNba2V5XSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICBoYXNEZXRhaWxzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gQWRkIHRoZSBkZXRhaWxzCiAgICAgICAgaWYgKGhhc0RldGFpbHMpIHsKICAgICAgICAgICAgaGVhbHRoRGF0YS5kZXRhaWxzID0gZGV0YWlsczsKICAgICAgICB9CiAgICAgICAgLy8gT25seSBhZGQgbm9kZXMgaWYgdGhleSBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24KICAgICAgICBpZiAoaXNMZWFmIHx8IGhhc0RldGFpbHMgfHwgaGVhbHRoRGF0YS5lcnJvcikgewogICAgICAgICAgICByZXN1bHQucHVzaChoZWFsdGhEYXRhKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGhlYWx0aERhdGE7CiAgICB9CiAgICBmbGF0dGVuSGVhbHRoRGF0YShyZXN1bHQsIHBhdGgsIGRhdGEpIHsKICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7CiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YVtrZXldOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIZWFsdGhPYmplY3QodmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzU3ViU3lzdGVtKHZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEhlYWx0aE9iamVjdChyZXN1bHQsIGZhbHNlLCB2YWx1ZSwgdGhpcy5nZXRNb2R1bGVOYW1lKHBhdGgsIGtleSkpOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsYXR0ZW5IZWFsdGhEYXRhKHJlc3VsdCwgdGhpcy5nZXRNb2R1bGVOYW1lKHBhdGgsIGtleSksIHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkSGVhbHRoT2JqZWN0KHJlc3VsdCwgdHJ1ZSwgdmFsdWUsIHRoaXMuZ2V0TW9kdWxlTmFtZShwYXRoLCBrZXkpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGdldE1vZHVsZU5hbWUocGF0aCwgbmFtZSkgewogICAgICAgIGxldCByZXN1bHQ7CiAgICAgICAgaWYgKHBhdGggJiYgbmFtZSkgewogICAgICAgICAgICByZXN1bHQgPSBwYXRoICsgdGhpcy5zZXBhcmF0b3IgKyBuYW1lOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChwYXRoKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHBhdGg7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKG5hbWUpIHsKICAgICAgICAgICAgcmVzdWx0ID0gbmFtZTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9ICcnOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogICAgaGFzU3ViU3lzdGVtKGhlYWx0aE9iamVjdCkgewogICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTsKICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFsdGhPYmplY3QpIHsKICAgICAgICAgICAgaWYgKGhlYWx0aE9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWx0aE9iamVjdFtrZXldOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICAgIGlzSGVhbHRoT2JqZWN0KGhlYWx0aE9iamVjdCkgewogICAgICAgIGxldCByZXN1bHQgPSBmYWxzZTsKICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFsdGhPYmplY3QpIHsKICAgICAgICAgICAgaWYgKGhlYWx0aE9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnc3RhdHVzJykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KfTsKSmhpSGVhbHRoU2VydmljZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbCiAgICBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pLAogICAgdHNsaWJfMS5fX21ldGFkYXRhKCJkZXNpZ246cGFyYW10eXBlcyIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIEh0dHBDbGllbnQgIT09ICJ1bmRlZmluZWQiICYmIEh0dHBDbGllbnQpID09PSAiZnVuY3Rpb24iID8gX2EgOiBPYmplY3RdKQpdLCBKaGlIZWFsdGhTZXJ2aWNlKTsKZXhwb3J0IHsgSmhpSGVhbHRoU2VydmljZSB9Owo="},{"version":3,"file":"/home/dushan/Desktop/projects/CA/nic_backend/src/main/webapp/app/admin/health/health.service.ts","sourceRoot":"","sources":["/home/dushan/Desktop/projects/CA/nic_backend/node_modules/angular-router-loader/src/index.js!/home/dushan/Desktop/projects/CA/nic_backend/node_modules/tslint-loader/index.js!/home/dushan/Desktop/projects/CA/nic_backend/src/main/webapp/app/admin/health/health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiHealthService {\n  separator: string;\n\n  constructor(private http: HttpClient) {\n    this.separator = '.';\n  }\n\n  checkHealth(): Observable<any> {\n    return this.http.get(SERVER_API_URL + 'management/health');\n  }\n\n  transformHealthData(data): any {\n    const response = [];\n    this.flattenHealthData(response, null, data.details);\n    return response;\n  }\n\n  getBaseName(name): string {\n    if (name) {\n      const split = name.split('.');\n      return split[0];\n    }\n  }\n\n  getSubSystemName(name): string {\n    if (name) {\n      const split = name.split('.');\n      split.splice(0, 1);\n      const remainder = split.join('.');\n      return remainder ? ' - ' + remainder : '';\n    }\n  }\n\n  /* private methods */\n  private addHealthObject(result, isLeaf, healthObject, name): any {\n    const healthData: any = {\n      name\n    };\n\n    const details = {};\n    let hasDetails = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        const value = healthObject[key];\n        if (key === 'status' || key === 'error') {\n          healthData[key] = value;\n        } else {\n          if (!this.isHealthObject(value)) {\n            details[key] = value;\n            hasDetails = true;\n          }\n        }\n      }\n    }\n\n    // Add the details\n    if (hasDetails) {\n      healthData.details = details;\n    }\n\n    // Only add nodes if they provide additional information\n    if (isLeaf || hasDetails || healthData.error) {\n      result.push(healthData);\n    }\n    return healthData;\n  }\n\n  private flattenHealthData(result, path, data): any {\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        const value = data[key];\n        if (this.isHealthObject(value)) {\n          if (this.hasSubSystem(value)) {\n            this.addHealthObject(result, false, value, this.getModuleName(path, key));\n            this.flattenHealthData(result, this.getModuleName(path, key), value);\n          } else {\n            this.addHealthObject(result, true, value, this.getModuleName(path, key));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  private getModuleName(path, name): string {\n    let result;\n    if (path && name) {\n      result = path + this.separator + name;\n    } else if (path) {\n      result = path;\n    } else if (name) {\n      result = name;\n    } else {\n      result = '';\n    }\n    return result;\n  }\n\n  private hasSubSystem(healthObject): boolean {\n    let result = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        const value = healthObject[key];\n        if (value && value.status) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  private isHealthObject(healthObject): boolean {\n    let result = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        if (key === 'status') {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}]}